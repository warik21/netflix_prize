########### Training data (rankings only, no dates):
con = url("http://www.tau.ac.il/~saharon/StatsLearn2020/train_ratings_all.dat")
X.tr = read.table (con)
con = url("http://www.tau.ac.il/~saharon/StatsLearn2020/train_y_rating.dat")
y.tr = read.table (con)

con = url("http://www.tau.ac.il/~saharon/StatsLearn2020/train_y_date.dat")
y.da.tr = read.table (con)

########### Test Data
con = url("http://www.tau.ac.il/~saharon/StatsLearn2020/test_ratings_all.dat")
X.te = read.table (con)

con = url("http://www.tau.ac.il/~saharon/StatsLearn2020/test_y_date.dat")
y.da.te = read.table (con)



con = url("http://www.tau.ac.il/~saharon/StatsLearn2020/movie_titles.txt")
titles = read.table(con,sep=",")
names (X.tr) = substr(as.character(titles[,2]),1,50)


########### Divide training data into training and validation
n = dim(X.tr)[1]
nva = 2000
ntr = n-nva
va.id = sample (n,nva) # choose 2000 points for validation
trtr.date = data.frame (X = X.tr[-va.id,], yda=y.da.tr[-va.id,], y=y.tr[-va.id,]) # include dates
trtr = data.frame (X = X.tr[-va.id,],y=y.tr[-va.id,])
va.date = data.frame (X = X.tr[va.id,], yda=y.da.tr[va.id,], y=y.tr[va.id,]) #include dates
va = data.frame (X = X.tr[va.id,],y=y.tr[va.id,])


########### baseline RMSE
print("the baseline RMSE is:")
sqrt(mean((va$y-mean(trtr$y))^2))





########### RMSE on a full X, filling the 0's with the mean of the column.

###this part is done to calculate the X.tr.full matrix, it takes a while
X.tr.full.col = X.tr
X.te.full.col = X.te
colnames(X.te.full.col) <- colnames(X.tr)

# replace zeros with NA
X.tr.full.col[X.tr.full.col == 0] <- NA
for (i in colnames(X.tr.full.col)){
  #replacing the NA values with the mean for each column
  a <- mean(X.tr.full.col[,i], na.rm = T)
  X.tr.full.col[,i][is.na(X.tr.full.col[,i])] <- a 
  X.te.full.col[,i][is.na(X.te.full.col[,i])] <- a
}

trtr.full.col = data.frame (X = X.tr.full.col[-va.id,],y=y.tr[-va.id,])
va.full.col = data.frame (X = X.tr.full.col[va.id,],y=y.tr[va.id,])
te.full.col = data.frame (X = X.te.full.col)


print("the column model results are:")
lin.mod.full.col = lm (y~.,data = trtr.full.col)

print("insample:")
lin.pred.cols.insample = predict(lin.mod.full.col, newdata = trtr.full.col)
lin.pred.cols.insample = pmin(lin.pred.cols.insample, 5)
lin.pred.cols.insample = pmax(lin.pred.cols.insample, 1)
print(sqrt(mean((trtr.full.col$y-lin.pred.cols.insample)^2)))


print("on validation")
lin.pred.cols.va = predict(lin.mod.full.col, newdata = va.full.col)
lin.pred.cols.va = pmin(lin.pred.cols.va, 5)
lin.pred.cols.va = pmax(lin.pred.cols.va, 1)
print(sqrt(mean((va.full.col$y-lin.pred.cols.va)^2)))


print("test")
lin.pred.cols.te = predict(lin.mod.full.col, newdata = te.full.col)
lin.pred.cols.te = pmin(lin.pred.cols.te, 5)
lin.pred.cols.te = pmax(lin.pred.cols.te, 1)
write.csv(lin.pred.cols.te, file='results.csv')



########### RMSE on a full X, filling the 0's with the mean of the row.

X.tr.full.row = X.tr
X.te.full.row = X.te
colnames(X.te.full.row) <- colnames(X.tr.full.row)

X.tr.full.row[X.tr.full.row == 0] <- NA
for (j in row.names(X.tr.full.row)){
  #replacing the NA values with the mean for each row
  X.tr.full.row[j,][is.na(X.tr.full.row[j,])] <- mean(t(X.tr.full.row[j,]), na.rm = T)
}

trtr.full.row = data.frame (X = X.tr.full.row[-va.id,],y=y.tr[-va.id,])
va.full.row = data.frame (X = X.tr.full.row[va.id,],y=y.tr[va.id,])


print("the row model results are:")
lin.mod.full.row = lm (y~.,data = trtr.full.row)

print("insample:")
lin.pred.rows.insample = predict(lin.mod.full.row, newdata = trtr.full.row)
lin.pred.rows.insample = pmin(lin.pred.rows.insample, 5)
lin.pred.rows.insample = pmax(lin.pred.rows.insample, 1)
print(sqrt(mean((trtr.full.row$y-lin.pred.rows.insample)^2)))


print("on validation")
lin.pred.rows.va = predict(lin.mod.full.row, newdata = va.full.row)
lin.pred.rows.va = pmin(lin.pred.rows.va, 5)
lin.pred.rows.va = pmax(lin.pred.rows.va, 1)
print(sqrt(mean((va.full.row$y-lin.pred.rows.va)^2)))







########### RMSE on a full X, filling the 0's with the mean of the row if the
########### mean is larger than 4.5, and with the mean of the column otherwise.


X.tr.full.both = X.tr
X.te.full.both = X.te
colnames(X.te.full.both) <- colnames(X.tr.full.both)

X.tr.full.both[X.tr.full.both == 0] <- NA


for (j in row.names(X.tr.full.both)){
  
  for (i in colnames(X.tr.full.both)){
    #he a lover
    if (mean(t(X.tr.full.both[j,], na.rm = T)) > 4.5){
      X.tr.full.both[j, i] <- 5
      #he a hater
    }else if ((mean(t(X.tr.full.bothx[j,], na.rm = T))) < 1.5){
      X.tr.full.both[j, i] <- 1
      #he is neither  
    }else{
      X.tr.full.both[j, i] <- mean(X.tr.full.both[,i], na.rm = T)
    }
    #we use strtoi because we need the integer part of j, which for some reason
    # is not trivial in this stupid language, which thinks "10000"<2931 is True
    #if (strtoi(j) < 2931){
    #if (X.te.full[j, i] == 0){
    #X.te.full[j, i] <- a
    
    #}
    #}
    
  }
}

print("the both model results for 4.5 are:")
lin.mod.full.both = lm (y~.,data = trtr.full.both)

print("insample:")
lin.pred.both.insample = predict(lin.mod.full.both, newdata = trtr.full.both)
lin.pred.both.insample = pmin(lin.pred.both.insample, 5)
lin.pred.both.insample = pmax(lin.pred.both.insample, 1)
print(sqrt(mean((trtr.full.both$y-lin.pred.both.insample)^2)))


print("on validation")
lin.pred.both.va = predict(lin.mod.full.both, newdata = va.full.both)
lin.pred.both.va = pmin(lin.pred.both.va, 5)
lin.pred.both.va = pmax(lin.pred.both.va, 1)
print(sqrt(mean((va.full.both$y-lin.pred.both.va)^2)))



#check everything on the virgin data
lin.mod = lm (y~.,data = trtr)
lin.pred = predict(lin.mod, newdata = trtr)
sqrt(mean((trtr$y-lin.pred)^2))
lin.pred = predict(lin.mod, newdata = va)
sqrt(mean((va$y-lin.pred)^2))
